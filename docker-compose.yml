version: "3.7"

networks:
  application-net:
    driver: bridge

services:

  user-db:
    image: postgres:17.2
    container_name: user_postgres_db
    restart: always
#    depends_on:
#      - service-discovery
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user-db
    volumes:
      - D:/docker-data/kufarspy/user-db:/var/lib/postgresql/data
    ports:
      - "5438:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d user-db" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)


  advertisement-db:
    image: postgres:17.2
    container_name: advertisement_postgres_db
    restart: always
    depends_on:
      - service-discovery
    environment:
      POSTGRES_USER: postgres_user_admin
      POSTGRES_PASSWORD: postgres_db_password
      POSTGRES_DB: advertisements
    volumes:
      - D:/docker-data/advertisements/advertisements-application-db:/var/lib/postgresql/data
    ports:
      - "5438:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user_admin -d kufardb" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)

  devices-db:
    image: postgres:17.2
    container_name: devices-postgres-db
    restart: always
#    depends_on:
#      - service-discovery
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: devices
    volumes:
      - D:/docker-data/advertisements/devices-service-db:/var/lib/postgresql/data
    ports:
      - "5411:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d devices" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)

  geo-data-db:
    image: postgres:17.2
    container_name: geo-postgres-db
    restart: always
    #    depends_on:
    #      - service-discovery
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: geo-data
    volumes:
      - D:/docker-data/advertisements/geo-service-db:/var/lib/postgresql/data
    ports:
      - "5412:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d geo-data" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)


  kufarspy:
    # image: kufarspy-application:latest // стабильная версия
    image: kufarspy-application:0.0.1
    container_name: kufarspy-application
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      service-discovery:
        condition: service_healthy
      kufarspy-db:
        condition: service_healthy
    environment:
      DB_USERNAME: postgres_user_admin
      DB_PASSWORD: postgres_db_password
      FLYWAY_LOG_LEVEL: DEBUG
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - application-net

  kufarspy-db:
    image: postgres:17.2
    container_name: kufar_postgres_db
    restart: always
    depends_on:
      - service-discovery
    environment:
      POSTGRES_USER: postgres_user_admin
      POSTGRES_PASSWORD: postgres_db_password
      POSTGRES_DB: kufardb
    volumes:
      - D:/docker-data/kufarspy/kufar-application-db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user_admin -d kufardb" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)

  kufar-parser-service:
    image: kufar-parser-service:latest
    container_name: kufar-parser-service
    restart: always
    ports:
      - "8088:8088"
    depends_on:
      service-discovery:
        condition: service_healthy
      kufar-parser-db:
        condition: service_healthy
    environment:
      DB_USERNAME: postgres_user_admin
      DB_PASSWORD: postgres_db_password
      FLYWAY_LOG_LEVEL: DEBUG
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - application-net

  kufar-parser-db:
    image: postgres:17.2
    container_name: kufar_parser_db
    restart: always
    depends_on:
      - service-discovery
    environment:
      POSTGRES_USER: postgres_user_admin
      POSTGRES_PASSWORD: postgres_db_password
      POSTGRES_DB: kufar-parser-db
    volumes:
      - D:/docker-data/kufarspy/kufar-parser-db:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user_admin -d kufar-parser-db" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)

  telegram-service:
    image: telegram-service:latest
    container_name: telegram-service
    restart: always
    ports:
      - "8087:8087"
    depends_on:
      service-discovery:
        condition: service_healthy
      kufar-parser-db:
        condition: service_healthy
    environment:
      DB_USERNAME: postgres_user_admin
      DB_PASSWORD: postgres_db_password
      FLYWAY_LOG_LEVEL: DEBUG
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - application-net

  telegram-bot-db:
    image: postgres:17.2
    container_name: telegram_bot_ms_postgres_db
    restart: always
    depends_on:
      - service-discovery
    environment:
      POSTGRES_USER: postgres_user_admin
      POSTGRES_PASSWORD: postgres_db_password
      POSTGRES_DB: telegram-bot-db
    volumes:
      - D:/docker-data/kufarspy/kufar-bot-db:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user_admin -d telegram-bot-db" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)


  service-discovery:
    image: discovery-service:latest
    restart: always
    ports:
      - "8761:8761"
    depends_on:
      - grafana
      - prometheus
      - redis
      - minio
    networks:
      - application-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/eureka/apps" ]
      interval: 10s
      timeout: 5s
      retries: 5


  config-server:
    image: config-server:latest
    restart: always
    ports:
      - "8888:8888"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - application-net
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - application-net

  minio:
    image: 'bitnami/minio:latest'
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
    networks:
      - application-net


  redis:
    container_name: redis-cache
    image: redis:8.0-M02-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - application-net


  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - D:/docker-data/kufarspy/prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=3GB'
      - '--web.enable-lifecycle'
    networks:
      - application-net

  # Zookeeper (требуется для Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - application-net

  # Kafka брокер
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092" # Внутренний порт для контейнеров
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - application-net

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    container_name: schema-registry
    restart: always
    depends_on:
      - kafka
    ports:
      - "8085:8085"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
    networks:
      - application-net

  # AKHQ UI для Kafka
  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    restart: always
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: "kafka:29092"
              schema-registry:
                url: "http://schema-registry:8085"
    networks:
      - application-net




