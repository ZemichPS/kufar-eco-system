version: "3.7"

networks:
  application-net:
    driver: bridge

services:

  kufarspy:
    image: kufarspy-application:latest
    container_name: kufarspy-application
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      service-discovery:
        condition: service_healthy
      kufarspy-db:
        condition: service_healthy
    environment:
      DB_USERNAME: postgres_user_admin
      DB_PASSWORD: postgres_db_password
      FLYWAY_LOG_LEVEL: DEBUG
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - application-net

  kufarspy-db:
    image: postgres:17.2
    container_name: kufar_postgres_db
    restart: always
    depends_on:
      - service-discovery
    environment:
      POSTGRES_USER: postgres_user_admin
      POSTGRES_PASSWORD: postgres_db_password
      POSTGRES_DB: kufardb
    volumes:
      - D:/docker-data/kufarspy/db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - application-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user_admin -d kufardb" ]
      interval: 10s          # Интервал между проверками (здесь каждые 10 секунд)
      timeout: 5s            # Таймаут команды проверки
      retries: 3             # Количество попыток перед тем, как контейнер будет помечен как unhealthy
      start_period: 30s      # Время ожидания перед первой проверкой (например, пока база поднимается)

  service-discovery:
    image: discovery-service:latest
    restart: always
    ports:
      - "8761:8761"
    depends_on:
      - grafana
      - prometheus
      - redis
      - minio
    networks:
      - application-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/eureka/apps" ]
      interval: 10s
      timeout: 5s
      retries: 5


  config-server:
    image: config-server:latest
    restart: always
    ports:
      - "8888:8888"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - application-net
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - application-net

  minio:
    image: 'bitnami/minio:latest'
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
    networks:
      - application-net


  redis:
    container_name: redis-cache
    image: redis:8.0-M02-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - application-net


  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - D:/docker-data/kufarspy/prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=3GB'
      - '--web.enable-lifecycle'
    networks:
      - application-net


